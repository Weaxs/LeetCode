package _191_numberOf1Bits;

/**
 * 位1的个数
 * 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
 *
 *  
 *
 * 示例 1：
 *
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 *
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 *
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 *  
 *
 * 提示：
 *
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 *  
 */
public class Solution {

    public int hammingWeight(int n) {
        int sum = 0;
        while (n != 0) {
            //下面使用了n &= (n - 1)， 就没必要判断n & 1的情况了
//            if ((n & 1) == 1) {
                sum++;
//            }
            // 不能用n >>=1，因为等于n /2
//            n >>= 1;
            //此处的n-1相当于磨掉了最右边的1
            n &= (n - 1);
        }
        return sum;
    }

    /**
     * 循环右移
     */
    public int hammingWeight2 (int n) {
        int bits = 0;
        int mask = 1;
        for (int i = 0; i < 32; i++) {
            if ((n & mask) != 0) {
                bits++;
            }
            //此处不能移n (n << 1)因为最高的符号位如果是1(负数)，左移或者右移n都会制造1
            //相当于对n * 2
//            n <<= 1;
            mask <<= 1;
        }
        return bits;

    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        System.out.println(solution.hammingWeight2(0b11111111111111111111111111111101));
    }

}
